--- cpdf_syntax_parser.cpp	2019-11-26 07:53:23.000000000 -0800
+++ ../../../../patchs/cpdf_syntax_parser_modified.cpp	2019-11-26 07:52:10.000000000 -0800
@@ -236,7 +236,8 @@
   if (!GetNextChar(ch))
     return ByteString();
 
-  std::ostringstream buf;
+  std::vector<char> buf;
+
   int32_t parlevel = 0;
   ReadStatus status = ReadStatus::Normal;
   int32_t iEscCode = 0;
@@ -245,7 +246,7 @@
       case ReadStatus::Normal:
         if (ch == ')') {
           if (parlevel == 0)
-            return ByteString(buf);
+            return ByteString(buf.data());
           parlevel--;
         } else if (ch == '(') {
           parlevel++;
@@ -253,7 +254,7 @@
         if (ch == '\\')
           status = ReadStatus::Backslash;
         else
-          buf << static_cast<char>(ch);
+          buf.push_back(static_cast<char>(ch));
         break;
       case ReadStatus::Backslash:
         if (FXSYS_IsOctalDigit(ch)) {
@@ -267,17 +268,17 @@
           break;
         }
         if (ch == 'n') {
-          buf << '\n';
+          buf.push_back('\n');
         } else if (ch == 'r') {
-          buf << '\r';
+          buf.push_back('\r');
         } else if (ch == 't') {
-          buf << '\t';
+          buf.push_back('\t');
         } else if (ch == 'b') {
-          buf << '\b';
+          buf.push_back('\b');
         } else if (ch == 'f') {
-          buf << '\f';
+          buf.push_back('\f');
         } else if (ch != '\n') {
-          buf << static_cast<char>(ch);
+          buf.push_back(static_cast<char>(ch));
         }
         status = ReadStatus::Normal;
         break;
@@ -287,7 +288,7 @@
               iEscCode * 8 + FXSYS_DecimalCharToInt(static_cast<wchar_t>(ch));
           status = ReadStatus::FinishOctal;
         } else {
-          buf << static_cast<char>(iEscCode);
+          buf.push_back(static_cast<char>(iEscCode));
           status = ReadStatus::Normal;
           continue;
         }
@@ -297,9 +298,9 @@
         if (FXSYS_IsOctalDigit(ch)) {
           iEscCode =
               iEscCode * 8 + FXSYS_DecimalCharToInt(static_cast<wchar_t>(ch));
-          buf << static_cast<char>(iEscCode);
+          buf.push_back(static_cast<char>(iEscCode));
         } else {
-          buf << static_cast<char>(iEscCode);
+          buf.push_back(static_cast<char>(iEscCode));
           continue;
         }
         break;
@@ -315,7 +316,7 @@
   }
 
   GetNextChar(ch);
-  return ByteString(buf);
+  return ByteString(buf.data());
 }
 
 ByteString CPDF_SyntaxParser::ReadHexString() {
@@ -323,7 +324,7 @@
   if (!GetNextChar(ch))
     return ByteString();
 
-  std::ostringstream buf;
+  std::vector<char> buf;
   bool bFirst = true;
   uint8_t code = 0;
   while (1) {
@@ -336,7 +337,7 @@
         code = val * 16;
       } else {
         code += val;
-        buf << static_cast<char>(code);
+        buf.push_back(static_cast<char>(code));
       }
       bFirst = !bFirst;
     }
@@ -345,9 +346,9 @@
       break;
   }
   if (!bFirst)
-    buf << static_cast<char>(code);
+    buf.push_back(static_cast<char>(code));
 
-  return ByteString(buf);
+  return ByteString(buf.data());
 }
 
 void CPDF_SyntaxParser::ToNextLine() {
