--- cpdf_streamparser.cpp	2019-11-26 08:01:05.000000000 -0800
+++ ../../../../patchs/cpdf_streamparser_modified.cpp	2019-11-26 08:00:24.000000000 -0800
@@ -12,6 +12,7 @@
 #include <memory>
 #include <sstream>
 #include <utility>
+#include <vector>
 
 #include "constants/stream_dict_common.h"
 #include "core/fpdfapi/page/cpdf_docpagedata.h"
@@ -37,7 +38,6 @@
 namespace {
 
 const uint32_t kMaxNestedParsingLevel = 512;
-const size_t kMaxStringLength = 32767;
 
 const char kTrue[] = "true";
 const char kFalse[] = "false";
@@ -454,7 +454,7 @@
     return ByteString();
 
   uint8_t ch = m_pBuf[m_Pos++];
-  std::ostringstream buf;
+  std::vector<char> buf;
   int parlevel = 0;
   int status = 0;
   int iEscCode = 0;
@@ -463,22 +463,20 @@
       case 0:
         if (ch == ')') {
           if (parlevel == 0) {
-            if (buf.tellp() <= 0)
+            if (buf.size() <= 0)
               return ByteString();
 
-            return ByteString(
-                buf.str().c_str(),
-                std::min(static_cast<size_t>(buf.tellp()), kMaxStringLength));
+            return ByteString(buf.data());
           }
           parlevel--;
-          buf << ')';
+          buf.push_back(')');
         } else if (ch == '(') {
           parlevel++;
-          buf << '(';
+          buf.push_back('(');
         } else if (ch == '\\') {
           status = 1;
         } else {
-          buf << static_cast<char>(ch);
+          buf.push_back(static_cast<char>(ch));
         }
         break;
       case 1:
@@ -494,17 +492,17 @@
         if (ch == '\n') {
           // Do nothing.
         } else if (ch == 'n') {
-          buf << '\n';
+          buf.push_back('\n');
         } else if (ch == 'r') {
-          buf << '\r';
+          buf.push_back('\r');
         } else if (ch == 't') {
-          buf << '\t';
+          buf.push_back('\t');
         } else if (ch == 'b') {
-          buf << '\b';
+          buf.push_back('\b');
         } else if (ch == 'f') {
-          buf << '\f';
+          buf.push_back('\f');
         } else {
-          buf << static_cast<char>(ch);
+          buf.push_back(static_cast<char>(ch));
         }
         status = 0;
         break;
@@ -514,7 +512,7 @@
               iEscCode * 8 + FXSYS_DecimalCharToInt(static_cast<char>(ch));
           status = 3;
         } else {
-          buf << static_cast<char>(iEscCode);
+          buf.push_back(static_cast<char>(iEscCode));
           status = 0;
           continue;
         }
@@ -523,10 +521,10 @@
         if (FXSYS_IsOctalDigit(ch)) {
           iEscCode =
               iEscCode * 8 + FXSYS_DecimalCharToInt(static_cast<char>(ch));
-          buf << static_cast<char>(iEscCode);
+          buf.push_back(static_cast<char>(iEscCode));
           status = 0;
         } else {
-          buf << static_cast<char>(iEscCode);
+          buf.push_back(static_cast<char>(iEscCode));
           status = 0;
           continue;
         }
@@ -545,19 +543,17 @@
   if (PositionIsInBounds())
     ++m_Pos;
 
-  if (buf.tellp() <= 0)
+  if (buf.size() <= 0)
     return ByteString();
 
-  return ByteString(
-      buf.str().c_str(),
-      std::min(static_cast<size_t>(buf.tellp()), kMaxStringLength));
+  return ByteString(buf.data());
 }
 
 ByteString CPDF_StreamParser::ReadHexString() {
   if (!PositionIsInBounds())
     return ByteString();
 
-  std::ostringstream buf;
+  std::vector<char> buf;
   bool bFirst = true;
   int code = 0;
   while (PositionIsInBounds()) {
@@ -574,19 +570,17 @@
       code = val * 16;
     } else {
       code += val;
-      buf << static_cast<uint8_t>(code);
+      buf.push_back(static_cast<uint8_t>(code));
     }
     bFirst = !bFirst;
   }
   if (!bFirst)
-    buf << static_cast<char>(code);
+    buf.push_back(static_cast<char>(code));
 
-  if (buf.tellp() <= 0)
+  if (buf.size() <= 0)
     return ByteString();
 
-  return ByteString(
-      buf.str().c_str(),
-      std::min(static_cast<size_t>(buf.tellp()), kMaxStringLength));
+  return ByteString(buf.data());
 }
 
 bool CPDF_StreamParser::PositionIsInBounds() const {
